// <auto-generated />
using System;
using BiblioGest.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BiblioGest.Migrations
{
    [DbContext(typeof(BiblioGestContext))]
    [Migration("20250501175613_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BiblioGest.Models.Adherent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Adresse")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<DateTime>("DateInscription")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Prenom")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Statut")
                        .HasColumnType("integer");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Adherents");
                });

            modelBuilder.Entity("BiblioGest.Models.Categorie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Fiction narrative longue en prose.",
                            Nom = "Roman"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Genre basé sur des éléments scientifiques spéculatifs.",
                            Nom = "Science-Fiction"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Genre centré sur la résolution d'un crime.",
                            Nom = "Policier"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Ouvrages traitant d'événements passés.",
                            Nom = "Histoire"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Art séquentiel combinant texte et images.",
                            Nom = "Bande Dessinée"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Basé sur des faits réels, informatif.",
                            Nom = "Documentaire"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Livres destinés aux enfants et adolescents.",
                            Nom = "Jeunesse"
                        });
                });

            modelBuilder.Entity("BiblioGest.Models.Emprunt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AdherentId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateEmprunt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateRetourEffective")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateRetourPrevue")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("LivreId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AdherentId");

                    b.HasIndex("LivreId");

                    b.ToTable("Emprunts");
                });

            modelBuilder.Entity("BiblioGest.Models.Livre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AnneePublication")
                        .HasColumnType("integer");

                    b.Property<string>("Auteur")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("CategorieId")
                        .HasColumnType("integer");

                    b.Property<string>("Editeur")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("ISBN")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int>("NombreExemplairesDisponibles")
                        .HasColumnType("integer");

                    b.Property<int>("NombreExemplairesTotal")
                        .HasColumnType("integer");

                    b.Property<string>("Titre")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.HasKey("Id");

                    b.HasIndex("CategorieId");

                    b.HasIndex("ISBN")
                        .IsUnique();

                    b.ToTable("Livres");
                });

            modelBuilder.Entity("BiblioGest.Models.Emprunt", b =>
                {
                    b.HasOne("BiblioGest.Models.Adherent", "Adherent")
                        .WithMany("Emprunts")
                        .HasForeignKey("AdherentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BiblioGest.Models.Livre", "Livre")
                        .WithMany("Emprunts")
                        .HasForeignKey("LivreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Adherent");

                    b.Navigation("Livre");
                });

            modelBuilder.Entity("BiblioGest.Models.Livre", b =>
                {
                    b.HasOne("BiblioGest.Models.Categorie", "Categorie")
                        .WithMany("Livres")
                        .HasForeignKey("CategorieId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Categorie");
                });

            modelBuilder.Entity("BiblioGest.Models.Adherent", b =>
                {
                    b.Navigation("Emprunts");
                });

            modelBuilder.Entity("BiblioGest.Models.Categorie", b =>
                {
                    b.Navigation("Livres");
                });

            modelBuilder.Entity("BiblioGest.Models.Livre", b =>
                {
                    b.Navigation("Emprunts");
                });
#pragma warning restore 612, 618
        }
    }
}
